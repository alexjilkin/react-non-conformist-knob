{"version":3,"sources":["Knob.js","App.js","index.js"],"names":["Knob","onChange","min","max","value","color","title","width","height","radialSegments","ref","useRef","useEffect","orbitRadius","scene","THREE","background","lastX","lastY","lastZ","camera","renderer","antialias","alpha","setClearColor","setSize","light","position","set","hemiLight","add","addLights","geometry","cone","addCone","x","y","z","norm","Math","sqrt","current","appendChild","domElement","element","controls","OrbitControls","enableZoom","enablePan","rotateSpeed","minPolarAngle","PI","maxPolarAngle","update","setControls","animate","requestAnimationFrame","pow","val","rVal","round","render","style","cursor","border","borderRadius","textAlign","padding","display","justifyContent","borderBottom","App","useState","setValue","value2","setValue2","value3","setValue3","fontFamily","fontWeight","margin","v","floor","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.667f6186.chunk.js","sourcesContent":["\nimport React, {useEffect, useRef} from 'react';\n\nimport * as THREE from 'three'\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst addLights = (scene) => {\n    let light = new THREE.DirectionalLight( 0xffffff, 0.8 );\n    light.position.set( -90, 400, 0 )\n\n    const hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 0.4);\n    scene.add( hemiLight );\n    scene.add( light );\n}\n\nconst setControls = (camera, element) => {\n    const controls = new OrbitControls( camera, element );\n    controls.enableZoom = false;\n    controls.enablePan = false;\n    controls.rotateSpeed = 0.4;\n    controls.minPolarAngle = Math.PI / 2;\n    controls.maxPolarAngle = Math.PI / 2;\n    \n    controls.update();\n}\n\nconst addCone = (scene, color = 'yellow', width, height) => {\n    const geometry = new THREE.ConeGeometry( width / 8, height / 5.4, 9);\n    const cone = new THREE.Mesh(geometry, new THREE.MeshPhysicalMaterial( {\n        color\n    }));\n    cone.position.set(0, 5, 0)\n    scene.add(cone);\n}\n\nconst Knob = ({onChange, min = 0, max = 1, value = 1, color, title = '', width = 150, height = 150, radialSegments = 9}) => {\n    const ref = useRef()\n\n    useEffect(() => {\n        const orbitRadius = width / 8.2 ;\n\n        const scene = new THREE.Scene();\n        scene.background = null;\n        const camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 );\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha:true });\n        renderer.setClearColor( 0xffffff, 0 );\n        renderer.setSize(width, height);        \n\n        addLights(scene);\n        addCone(scene, color, width, height, radialSegments)\n\n        let lastX;\n        let lastY;\n        let lastZ;\n\n        camera.position.x = orbitRadius;\n        camera.position.y = orbitRadius;\n        camera.position.z = orbitRadius;\n\n        const norm = Math.sqrt(2) * orbitRadius;\n        camera.position.y = norm\n        camera.position.z = (((value - min) / max) - 0.5)  * 2\n\n        ref.current.appendChild( renderer.domElement );\n        \n        setControls(camera, renderer.domElement);\n\n        function animate() {\n            requestAnimationFrame( animate );\n            const norm = Math.sqrt(Math.pow(camera.position.x, 2) + Math.pow(camera.position.z, 2));\n\n            if (camera.position.x !== lastX) {\n                lastX = camera.position.x;\n            }\n\n            if (camera.position.y !== lastY) {\n                lastY = camera.position.y;\n            }\n\n            if (camera.position.z !== lastZ) {\n                lastZ = camera.position.z;\n                const val = min + (0.5 + camera.position.z / (norm * 2)) * max\n                const rVal = Math.round(val * 10) / 10\n\n                onChange(rVal)\n            }\n\n            renderer.render(scene, camera);\n        }\n        animate();\n    }, [ref])\n\n    \n    return (\n        <div>\n            \n            <div style={{width, height, cursor: 'grab'}} ref={ref}>\n\n            </div>\n            <div style={{border: `solid 2px ${color}`, borderRadius: 5, textAlign: 'center', padding: 2}}>\n                {title}\n            </div>\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                <div style={{borderBottom: `solid 3px ${color}`, borderRadius: 1, textAlign: 'center', padding: 2}}>\n                    {value}\n                </div>\n            </div>\n        </div>\n        \n    )\n  }\n  \nexport default Knob","import React, {useState} from 'react';\nimport Knob from './Knob'\n\nconst App = () => {\n    const [value, setValue] = useState(0)\n    const [value2, setValue2] = useState(0)\n    const [value3, setValue3] = useState(0)\n\n    return (\n        <div style={{display: 'flex', fontFamily: 'Roboto', fontWeight: 800}}>\n            <span style={{margin: 10}}>\n                <Knob value={value} onChange={setValue} title=\"Opacity\" color=\"yellow\"/>\n            </span>\n            <span style={{margin: 10}}>\n                <Knob value={value2} onChange={(v) => setValue2(Math.floor(v))} title=\"Distortion\" min={1} max={10} color=\"lightgreen\" width={125} height={125}/>\n            </span>\n            <span style={{margin: 10}}>\n                <Knob value={value3} onChange={setValue3} title=\"Blur\" min={0} max={0.5} color=\"lightgreen\" width={100} height={100}/>\n            </span>\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}