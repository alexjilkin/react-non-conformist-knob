{"version":3,"sources":["ConeKnob.js","App.js","index.js"],"names":["Cone","onChange","min","max","value","color","title","ref","useRef","useEffect","scene","THREE","background","lastX","lastY","lastZ","camera","renderer","antialias","alpha","setClearColor","setSize","light","position","set","hemiLight","add","addLights","geometry","cone","addCone","x","y","z","norm","Math","sqrt","current","appendChild","domElement","element","controls","OrbitControls","enableZoom","enablePan","rotateSpeed","minPolarAngle","PI","maxPolarAngle","update","setControls","animate","requestAnimationFrame","pow","val","rVal","round","render","style","width","height","cursor","fontFamily","fontWeight","App","useState","setValue","value2","setValue2","ConeKnob","v","floor","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02e3f0d2.chunk.js","sourcesContent":["\nimport React, {useEffect, useRef} from 'react';\n\nimport * as THREE from 'three'\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst orbitRadius = 20;\n\nconst width = 150;\nconst height = 150;\n\nconst addLights = (scene) => {\n    let light = new THREE.DirectionalLight( 0xffffff, 0.8 );\n    light.position.set( 90, 500, 0 )\n\n    const hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 0.4);\n    scene.add( hemiLight );\n    scene.add( light );\n}\n\nconst setControls = (camera, element) => {\n    const controls = new OrbitControls( camera, element );\n    controls.enableZoom = false;\n    controls.enablePan = false;\n    controls.rotateSpeed = 0.4;\n    controls.minPolarAngle = Math.PI / 2;\n    controls.maxPolarAngle = Math.PI / 2;\n    \n    controls.update();\n}\n\nconst addCone = (scene, color = 'yellow') => {\n    const geometry = new THREE.ConeGeometry( 19, 23, 9 );\n    const cone = new THREE.Mesh(geometry, new THREE.MeshPhysicalMaterial( {\n        color\n    }));\n\n    scene.add(cone);\n}\n\nconst Cone = ({onChange, min = 0, max = 1, value = 1, color, title = ''}) => {\n    const ref = useRef()\n\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        scene.background = null;\n        const camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000 );\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha:true });\n        renderer.setClearColor( 0xffffff, 0 );\n        renderer.setSize(width, height);        \n\n        addLights(scene);\n        addCone(scene, color)\n\n        let lastX;\n        let lastY;\n        let lastZ;\n\n        camera.position.x = orbitRadius;\n        camera.position.y = orbitRadius;\n        camera.position.z = orbitRadius;\n\n        const norm = Math.sqrt(2) * orbitRadius;\n        camera.position.y = norm\n        camera.position.z = (((value - min) / max) - 0.5)  * 2\n\n        ref.current.appendChild( renderer.domElement );\n        \n        setControls(camera, renderer.domElement);\n\n        function animate() {\n            requestAnimationFrame( animate );\n            const norm = Math.sqrt(Math.pow(camera.position.x, 2) + Math.pow(camera.position.z, 2));\n\n            if (camera.position.x !== lastX) {\n                lastX = camera.position.x;\n            }\n\n            if (camera.position.y !== lastY) {\n                lastY = camera.position.y;\n            }\n\n            if (camera.position.z !== lastZ) {\n                lastZ = camera.position.z;\n                const val = min + (0.5 + camera.position.z / (norm * 2)) * max\n                const rVal = Math.round(val * 10) / 10\n\n                onChange(rVal)\n            }\n\n            renderer.render(scene, camera);\n        }\n        animate();\n    }, [ref])\n\n    \n    return (\n        <div>\n            <div style={{width, height, cursor: 'grab'}} ref={ref}>\n\n            </div>\n            <div style={{fontFamily: 'Roboto', fontWeight: 500}}>\n                {title}: {value}\n            </div>\n        </div>\n        \n    )\n  }\n  \nexport default Cone","import React, {useState} from 'react';\nimport ConeKnob from './ConeKnob'\n\nconst App = () => {\n    const [value, setValue] = useState(0)\n    const [value2, setValue2] = useState(0)\n\n    return (\n        <>\n            <ConeKnob value={value} onChange={setValue} title=\"Test\" />\n            <ConeKnob value={value2} onChange={(v) => setValue2(Math.floor(v))} title=\"Another\" min={1} max={10} color=\"lightgreen\"/>\n        </>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}